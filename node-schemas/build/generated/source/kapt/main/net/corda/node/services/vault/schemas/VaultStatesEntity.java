// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package net.corda.node.services.vault.schemas;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.AttributeDelegate;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.Instant;
import javax.annotation.Generated;
import net.corda.core.node.services.Vault;

@Generated("io.requery.processor.EntityProcessor")
public class VaultStatesEntity implements VaultSchema.VaultStates, Persistable {
    public static final AttributeDelegate<VaultStatesEntity, String> NOTARY_NAME = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, String>("notary_name", String.class)
    .setProperty(new Property<VaultStatesEntity, String>() {
        @Override
        public String get(VaultStatesEntity entity) {
            return entity.notaryName;
        }

        @Override
        public void set(VaultStatesEntity entity, String value) {
            entity.notaryName = value;
        }
    })
    .setPropertyName("getNotaryName")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$notaryName_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$notaryName_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, String> NOTARY_KEY = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, String>("notary_key", String.class)
    .setProperty(new Property<VaultStatesEntity, String>() {
        @Override
        public String get(VaultStatesEntity entity) {
            return entity.notaryKey;
        }

        @Override
        public void set(VaultStatesEntity entity, String value) {
            entity.notaryKey = value;
        }
    })
    .setPropertyName("getNotaryKey")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$notaryKey_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$notaryKey_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, String> CONTRACT_STATE_CLASS_NAME = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, String>("contract_state_class_name", String.class)
    .setProperty(new Property<VaultStatesEntity, String>() {
        @Override
        public String get(VaultStatesEntity entity) {
            return entity.contractStateClassName;
        }

        @Override
        public void set(VaultStatesEntity entity, String value) {
            entity.contractStateClassName = value;
        }
    })
    .setPropertyName("getContractStateClassName")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$contractStateClassName_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$contractStateClassName_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, byte[]> CONTRACT_STATE = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, byte[]>("contract_state", byte[].class)
    .setProperty(new Property<VaultStatesEntity, byte[]>() {
        @Override
        public byte[] get(VaultStatesEntity entity) {
            return entity.contractState;
        }

        @Override
        public void set(VaultStatesEntity entity, byte[] value) {
            entity.contractState = value;
        }
    })
    .setPropertyName("getContractState")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$contractState_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$contractState_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setLength(100000)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, Vault.StateStatus> STATE_STATUS = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, Vault.StateStatus>("state_status", Vault.StateStatus.class)
    .setProperty(new Property<VaultStatesEntity, Vault.StateStatus>() {
        @Override
        public Vault.StateStatus get(VaultStatesEntity entity) {
            return entity.stateStatus;
        }

        @Override
        public void set(VaultStatesEntity entity, Vault.StateStatus value) {
            entity.stateStatus = value;
        }
    })
    .setPropertyName("getStateStatus")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$stateStatus_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$stateStatus_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, Instant> RECORDED_TIME = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, Instant>("recorded_timestamp", Instant.class)
    .setProperty(new Property<VaultStatesEntity, Instant>() {
        @Override
        public Instant get(VaultStatesEntity entity) {
            return entity.recordedTime;
        }

        @Override
        public void set(VaultStatesEntity entity, Instant value) {
            entity.recordedTime = value;
        }
    })
    .setPropertyName("getRecordedTime")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$recordedTime_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$recordedTime_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, Instant> CONSUMED_TIME = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, Instant>("consumed_timestamp", Instant.class)
    .setProperty(new Property<VaultStatesEntity, Instant>() {
        @Override
        public Instant get(VaultStatesEntity entity) {
            return entity.consumedTime;
        }

        @Override
        public void set(VaultStatesEntity entity, Instant value) {
            entity.consumedTime = value;
        }
    })
    .setPropertyName("getConsumedTime")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$consumedTime_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$consumedTime_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, String> LOCK_ID = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, String>("lock_id", String.class)
    .setProperty(new Property<VaultStatesEntity, String>() {
        @Override
        public String get(VaultStatesEntity entity) {
            return entity.lockId;
        }

        @Override
        public void set(VaultStatesEntity entity, String value) {
            entity.lockId = value;
        }
    })
    .setPropertyName("getLockId")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$lockId_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$lockId_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, Instant> LOCK_UPDATE_TIME = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, Instant>("lock_timestamp", Instant.class)
    .setProperty(new Property<VaultStatesEntity, Instant>() {
        @Override
        public Instant get(VaultStatesEntity entity) {
            return entity.lockUpdateTime;
        }

        @Override
        public void set(VaultStatesEntity entity, Instant value) {
            entity.lockUpdateTime = value;
        }
    })
    .setPropertyName("getLockUpdateTime")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$lockUpdateTime_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$lockUpdateTime_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, String> TX_ID = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, String>("transaction_id", String.class)
    .setProperty(new Property<VaultStatesEntity, String>() {
        @Override
        public String get(VaultStatesEntity entity) {
            return entity.txId;
        }

        @Override
        public void set(VaultStatesEntity entity, String value) {
            entity.txId = value;
        }
    })
    .setPropertyName("getTxId")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$txId_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$txId_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setLength(64)
    .build());

    public static final AttributeDelegate<VaultStatesEntity, Integer> INDEX = new AttributeDelegate(
    new AttributeBuilder<VaultStatesEntity, Integer>("output_index", int.class)
    .setProperty(new IntProperty<VaultStatesEntity>() {
        @Override
        public Integer get(VaultStatesEntity entity) {
            return entity.index;
        }

        @Override
        public void set(VaultStatesEntity entity, Integer value) {
            if(value != null) {
                entity.index = value;
            }
        }

        @Override
        public int getInt(VaultStatesEntity entity) {
            return entity.index;
        }

        @Override
        public void setInt(VaultStatesEntity entity, int value) {
            entity.index = value;
        }
    })
    .setPropertyName("getIndex")
    .setPropertyState(new Property<VaultStatesEntity, PropertyState>() {
        @Override
        public PropertyState get(VaultStatesEntity entity) {
            return entity.$index_state;
        }

        @Override
        public void set(VaultStatesEntity entity, PropertyState value) {
            entity.$index_state = value;
        }
    })
    .setKey(true)
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setLength(255)
    .build());

    public static final Type<VaultStatesEntity> $TYPE = new TypeBuilder<VaultStatesEntity>(VaultStatesEntity.class, "vault_states")
    .setBaseType(VaultSchema.VaultStates.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setFactory(new Supplier<VaultStatesEntity>() {
        @Override
        public VaultStatesEntity get() {
            return new VaultStatesEntity();
        }
    })
    .setProxyProvider(new Function<VaultStatesEntity, EntityProxy<VaultStatesEntity>>() {
        @Override
        public EntityProxy<VaultStatesEntity> apply(VaultStatesEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(NOTARY_NAME)
    .addAttribute(NOTARY_KEY)
    .addAttribute(CONSUMED_TIME)
    .addAttribute(LOCK_ID)
    .addAttribute(LOCK_UPDATE_TIME)
    .addAttribute(CONTRACT_STATE_CLASS_NAME)
    .addAttribute(INDEX)
    .addAttribute(CONTRACT_STATE)
    .addAttribute(STATE_STATUS)
    .addAttribute(RECORDED_TIME)
    .addAttribute(TX_ID)
    .build();

    private PropertyState $notaryName_state;

    private PropertyState $notaryKey_state;

    private PropertyState $contractStateClassName_state;

    private PropertyState $contractState_state;

    private PropertyState $stateStatus_state;

    private PropertyState $recordedTime_state;

    private PropertyState $consumedTime_state;

    private PropertyState $lockId_state;

    private PropertyState $lockUpdateTime_state;

    private PropertyState $txId_state;

    private PropertyState $index_state;

    private String notaryName;

    private String notaryKey;

    private String contractStateClassName;

    private byte[] contractState;

    private Vault.StateStatus stateStatus;

    private Instant recordedTime;

    private Instant consumedTime;

    private String lockId;

    private Instant lockUpdateTime;

    private String txId;

    private int index;

    private final transient EntityProxy<VaultStatesEntity> $proxy = new EntityProxy<VaultStatesEntity>(this, $TYPE);

    public VaultStatesEntity() {
    }

    @Override
    public String getNotaryName() {
        return $proxy.get(NOTARY_NAME);
    }

    public void setNotaryName(String notaryName) {
        $proxy.set(NOTARY_NAME, notaryName);
    }

    @Override
    public String getNotaryKey() {
        return $proxy.get(NOTARY_KEY);
    }

    public void setNotaryKey(String notaryKey) {
        $proxy.set(NOTARY_KEY, notaryKey);
    }

    @Override
    public String getContractStateClassName() {
        return $proxy.get(CONTRACT_STATE_CLASS_NAME);
    }

    public void setContractStateClassName(String contractStateClassName) {
        $proxy.set(CONTRACT_STATE_CLASS_NAME, contractStateClassName);
    }

    @Override
    public byte[] getContractState() {
        return $proxy.get(CONTRACT_STATE);
    }

    public void setContractState(byte[] contractState) {
        $proxy.set(CONTRACT_STATE, contractState);
    }

    @Override
    public Vault.StateStatus getStateStatus() {
        return $proxy.get(STATE_STATUS);
    }

    public void setStateStatus(Vault.StateStatus stateStatus) {
        $proxy.set(STATE_STATUS, stateStatus);
    }

    @Override
    public Instant getRecordedTime() {
        return $proxy.get(RECORDED_TIME);
    }

    public void setRecordedTime(Instant recordedTime) {
        $proxy.set(RECORDED_TIME, recordedTime);
    }

    @Override
    public Instant getConsumedTime() {
        return $proxy.get(CONSUMED_TIME);
    }

    public void setConsumedTime(Instant consumedTime) {
        $proxy.set(CONSUMED_TIME, consumedTime);
    }

    @Override
    public String getLockId() {
        return $proxy.get(LOCK_ID);
    }

    public void setLockId(String lockId) {
        $proxy.set(LOCK_ID, lockId);
    }

    @Override
    public Instant getLockUpdateTime() {
        return $proxy.get(LOCK_UPDATE_TIME);
    }

    public void setLockUpdateTime(Instant lockUpdateTime) {
        $proxy.set(LOCK_UPDATE_TIME, lockUpdateTime);
    }

    public String getTxId() {
        return $proxy.get(TX_ID);
    }

    public void setTxId(String txId) {
        $proxy.set(TX_ID, txId);
    }

    public int getIndex() {
        return $proxy.get(INDEX);
    }

    public void setIndex(int index) {
        $proxy.set(INDEX, index);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof VaultStatesEntity && ((VaultStatesEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
